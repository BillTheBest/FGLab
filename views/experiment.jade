doctype html
html(lang="en")
  head
    title FGLab - Experiment #{experiment._id}
    style(type="text/css").
      path {
        stroke: steelblue;
        stroke-width: 1;
        fill: none;
      }
      line {
        stroke: black;
      }
      text {
        font-size: 9pt;
      }
    script(src="/javascripts/jquery/jquery.min.js")
    script(src="/javascripts/d3/d3.min.js")
  body
    h1 Experiment #{experiment._id} (#{experiment.status})

    - if (experiment.status === "running")
      button(class="kill") Kill Experiment

    p= "Hyperparams: " + JSON.stringify(experiment.hyperparams)
    if experiment.train
      #resGraph
      //p Training Losses (every #{experiment.train.freq} iterations): #{experiment.train.losses}
    if experiment.val
      p Validation Losses (every #{experiment.val.freq} iterations): #{experiment.val.losses}
    if experiment.test
      p Test Loss: #{experiment.test.loss}
      p Test Score: #{experiment.test.score}

    script.
      $(function() {
        // Chart variables
        var trainLosses = JSON.parse('[!{experiment.val.losses}]'); // Parse array
        var width = 800;
        var height = 600;
        var margin = 25;
        var y = d3.scale.linear().domain([d3.max(trainLosses), 0]).range([0 + margin, height - margin]); // Reverse y-scale for easier data mapping
        var x = d3.scale.linear().domain([0, trainLosses.length]).range([0 + margin, width - margin]);
        // Create chart
        var vis = d3.select("#resGraph").append("svg:svg").attr("width", width).attr("height", height);
        var g = vis.append("svg:g");
        // Create line
        var line = d3.svg.line().x(function(d, i) {return x(i);}).y(function(d) {return y(d);});
        g.append("svg:path").attr("d", line(trainLosses));
        // Create axes
        g.append("svg:line").attr("x1", x(0)).attr("y1", y(0)).attr("x2", x(width)).attr("y2", y(0));
        g.append("svg:line").attr("x1", x(0)).attr("y1", y(0)).attr("x2", x(0)).attr("y2", y(d3.max(trainLosses)));
        // Create labels
        g.selectAll(".xLabel").data(x.ticks(5)).enter().append("svg:text").attr("class", "xLabel").text(String).attr("x", function(d) {return x(d);}).attr("y", 0).attr("text-anchor", "middle");
        g.selectAll(".yLabel").data(y.ticks(4)).enter().append("svg:text").attr("class", "yLabel").text(String).attr("x", 0).attr("y", function(d) {return y(d);}).attr("text-anchor", "right").attr("dy", 4);
        // Create ticks
        g.selectAll(".xTicks").data(x.ticks(5)).enter().append("svg:line").attr("class", "xTicks").attr("x1", function(d) {return x(d);}).attr("y1", y(0)).attr("x2", function(d) {return x(d);}).attr("y2", -y(-0.3));
        g.selectAll(".yTicks").data(y.ticks(4)).enter().append("svg:line").attr("class", "yTicks").attr("y1", function(d) {return y(d);}).attr("x1", x(-0.3)).attr("y2", function(d) {return y(d);}).attr("x2", x(0));

        // Kills experiment
        $("button.kill").on("click", function() {
          $.ajax({
            url: "#{mac}/experiments/#{experiment._id}/kill",
            type: "POST"
          }).then(function(response) {
            location.reload(); // May have succeeded before kill
          }).catch(function(err) {console.log(err);});
          return false; // Stop event and propagation
        });
      });
