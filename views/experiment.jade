extends ./layout.jade

block title
  title FGLab: Experiment #{experiment._id}

block styles
  link(href="/bower_components/c3/c3.min.css", rel="stylesheet")

block content
  h1 #[span.mega-octicon.octicon-graph] Experiment: #{experiment._id}
  - if (experiment._status === "running")
    button.btn.btn-danger.kill Kill Experiment

  dl.dl-horizontal
    dt.col-sm-3 Status
    dd#status.col-sm-9 #{experiment._status} #[span.octicon]
    dt.col-sm-3 Project
    dd.col-sm-9 #[a(href="/projects/#{project._id}/experiments") #{project.name}]
    dt.col-sm-3 Machine
    dd.col-sm-9 #[a(href="/machines/#{machine._id}") #{machine.hostname}]
    if experiment._started
      dt.col-sm-3 Started
      dd#experiment-started.col-sm-9
    if experiment._finished
      dt.col-sm-3 Finished
      dd#experiment-finished.col-sm-9
    dt.col-sm-3 Options
    dd.col-sm-9= JSON.stringify(experiment._options)
    if experiment._scores
      each val, prop in experiment._scores
        dt.col-sm-3 #{prop}
        dd.col-sm-9 #{val}
    - if (experiment._files.length > 0)
      dt.col-sm-3 Files
      dd.col-sm-9
        ul.list-unstyled(style="margin-bottom: 0;")
        - each file in experiment._files
          li #[a(href="/files/#{file._id}") #{file.filename}]
    - for (var key in experiment)
      if (key[0] !== "_")
        dt.col-sm-3 #{key}
        dd.col-sm-9= experiment[key]
    if experiment._charts
      each val, ind in experiment._charts
        div(id= "chart_" + ind)

block scripts
  script(src="/bower_components/jquery/dist/jquery.min.js")
  script(src="/bower_components/bootstrap/dist/js/bootstrap.min.js")
  script(src="/bower_components/d3/d3.min.js")
  script(src="/bower_components/c3/c3.min.js")
  script(src="/bower_components/lodash/lodash.min.js")
  script(src="/bower_components/largest-triangle-three-buckets/dist/largest-triangle-three-buckets.v0.1.0.min.js")
  script(src="/bower_components/moment/min/moment.min.js")
  script(src="/javascripts/chart.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var experiment = !{JSON.stringify(experiment)};
    // C3 charts
    var c3Charts = [];

    $(function() {
      // Adjust status
      var status = experiment._status;
      var textClass;
      var iconClass;
      if (status === "success") {
        textClass = "text-success";
        iconClass = "octicon-check text-success";
      } else if (status === "fail") {
        textClass = "text-danger";
        iconClass = "octicon-circle-slash text-danger";
      } else if (status == "running") {
        textClass = "text-info";
        iconClass = "octicon-clock text-info";
      }
      $("#status").addClass(textClass);
      $("#status .octicon").addClass(iconClass);

      // Add times
      if (experiment._started) {
        $("#experiment-started").html(moment().format(experiment._started));
      }
      if (experiment._finished) {
        $("#experiment-finished").html(moment().format(experiment._finished));
      }

      if (experiment._charts) {
        // Use Largest-Triangle-Three-Buckets downsampling
        var downsampleFactor = 500;

        // Create charts
        for (var i = 0; i < experiment._charts.length; i++) {
          var chartData = experiment._charts[i];
          // Default chart options
          var chartDefaults = {
            bindto: "#chart_" + i,
            axis: {
              x: {label: {position: "outer-center"}, padding: {left: 0}},
              y: {label: {position: "outer-middle"}, padding: 0}
            },
            point: {show: false},
            zoom: {enabled: true}
          };
          // Add default options
          _.defaultsDeep(chartData, chartDefaults);

          // Loop over data to downsample
          for (var j = 0; j < chartData.data.columns.length; j++) {
            // TODO Deal with different chart types
            if (chartData.data.columns[j].length > downsampleFactor) {
              // Get values
              var vals = chartData.data.columns[j];
              var valsKey = chartData._columnNames[j];
              if (valsKey) {
                // Get indices
                var indicesKey = chartData.data.xs[valsKey];
                var indicesIndex = chartData._columnNames.indexOf(indicesKey);
                var indices = chartData.data.columns[indicesIndex];
                // Downsample
                var zippedValues = _.zip(indices, vals);
                var downsampledValues = _.unzip(largestTriangleThreeBuckets(zippedValues, downsampleFactor, 0, 1));
                // Replace values and indices
                chartData.data.columns[indicesIndex] = downsampledValues[0];
                chartData.data.columns[j] = downsampledValues[1];
              } else {
                // TODO Create linear range and downsample
              }
            }
          }
          // Loop over data to add column names
          for (var j = 0; j < chartData.data.columns.length; j++) {
            chartData.data.columns[j].unshift(chartData._columnNames[j]);
          }

          // Render
          c3Charts.push(c3.generate(chartData));

          // Render chart in Web Worker
          // TODO Add Web Worker support with jsdom and benv?
          /*
          var worker = new Worker("/javascripts/chart.js");
          // Push rendered chart
          worker.addEventListener("message", function(e) {
            c3Charts.push(e.data);
          }, false);
          // Send chart
          worker.postMessage({chart: chart}); // Start worker
          */

          // TODO Add toggle buttons
          //$("#chart-buttons").append("&nbsp;<button data-plot='Train' class='btn btn-primary active' data-toggle='button' aria-pressed='true'>Train</button>");
        }

        // Toggles plots on chart
        /*$("#chart-buttons").on("click", "button", function() {
          var $el = $(this);
          var plot = $el.data("plot");
          var isShown = $el.attr("aria-pressed") === "true";
          if (isShown) {
            chart.hide([plot]);
          } else {
            chart.show([plot]);
          }
          $el.button("toggle");
          return false; // Stop event and propagation
        });*/
      }

      // Kills experiment
      $("button.kill").on("click", function() {
        $.ajax({
          url: "#{machine.address}/experiments/#{experiment._id}/kill",
          type: "POST"
        }).then(function(response) {
          location.reload(); // May have succeeded before kill
        }).catch(function(err) {console.log(err);});
        return false; // Stop event and propagation
      });
    });
