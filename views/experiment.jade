extends ./layout.jade

block title
  title FGLab: Experiment #{experiment._id}

block styles
  link(href="/bower_components/c3/c3.min.css", rel="stylesheet")
  style(type="text/css").
    path {
      stroke: green;
      stroke-width: 1;
      fill: none;
    }
    path.valLoss {
      stroke: blue;
    }
    line {
      stroke: black;
    }
    text {
      font-size: 9pt;
    }

block content
  h1 Experiment: #{experiment._id}
  - if (experiment._status === "running")
    button.btn.btn-danger.kill Kill Experiment

  dl.dl-horizontal
    dt.col-sm-3 Status
    dd#status.col-sm-9 #{experiment._status} #[span.octicon]
    dt.col-sm-3 Project ID
    dd.col-sm-9 #{experiment._project_id}
    dt.col-sm-3 Machine
    dd.col-sm-9 #{machine.hostname}
    if experiment._started
      dt.col-sm-3 Started
      dd.col-sm-9 #{experiment._started}
    if experiment._finished
      dt.col-sm-3 Finished
      dd.col-sm-9 #{experiment._finished}
    dt.col-sm-3 Hyperparams
    dd.col-sm-9= JSON.stringify(experiment._hyperparams)
    if experiment._test
      dt.col-sm-3 Test Loss
      dd.col-sm-9 #{experiment._test.loss}
      dt.col-sm-3 Test Score
      dd.col-sm-9 #{experiment._test.score}
    if experiment._train
      dt.col-sm-3 Loss Graph #[small.text-muted (zoom enabled)]
      dd.col-sm-9#chart-buttons Toggle
  if experiment._train
    #chart
  dl.dl-horizontal
    - for (var key in experiment)
      if (key[0] !== "_")
        dt.col-sm-3 #{key}
        dd.col-sm-9= experiment[key]

block scripts
  script(src="/bower_components/jquery/dist/jquery.min.js")
  script(src="/bower_components/bootstrap/dist/js/bootstrap.min.js")
  script(src="/bower_components/d3/d3.min.js")
  script(src="/bower_components/c3/c3.min.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var experiment = !{JSON.stringify(experiment)};

    // TODO Use frequency information?
    var plotLength = 1000;
    var downsample = function(arr) {
      var len = arr.length;
      if (len > plotLength) {
        var step = Math.floor(len / plotLength);
        var down = [];
        for (var i = 0; i < len; i += step) {
          down.push(arr[i]);
        }
        while (down.length > plotLength) {
          down.pop();
        }
        return down;
      } else {
        return arr;
      }
    };

    $(function() {
      // Adjust status
      var status = "#{experiment._status}";
      var textClass;
      var iconClass;
      if (status === "success") {
        textClass = "text-success";
        iconClass = "octicon-check text-success";
      } else if (status === "fail") {
        textClass = "text-danger";
        iconClass = "octicon-circle-slash text-danger";
      } else if (status == "running") {
        textClass = "text-info";
        iconClass = "octicon-clock text-info";
      }
      $("#status").addClass(textClass);
      $("#status .octicon").addClass(iconClass);

      // Create chart for training
      var chart;
      if (experiment._train) {
        // Chart variables
        var trainIndices = downsample(experiment._train.indices);
        trainIndices.unshift("trainIndices");
        var trainLosses = downsample(experiment._train.losses);
        trainLosses.unshift("Train");

        // C3 chart
        chart = c3.generate({
          bindTo: "#chart",
          data: {
            xs: {Train: "trainIndices", Val: "valIndices"},
            columns: [trainIndices, trainLosses]
          },
          axis: {
            x: {label: {text: "Iterations", position: "outer-center"}},
            y: {label: {text: "Loss", position: "outer-middle"}}
          },
          point: {show: false},
          zoom: {enabled: true}
        });

        // Add toggle button
        $("#chart-buttons").append("&nbsp;<button data-plot='Train' class='btn btn-primary active' data-toggle='button' aria-pressed='true'>Train</button>");
      }
      // Add validation to chart if it exists
      if (experiment._val) {
        // Chart variables
        var valIndices = downsample(experiment._val.indices);
        valIndices.unshift("valIndices");
        var valLosses = downsample(experiment._val.losses);
        valLosses.unshift("Val");

        // Load validation data
        chart.load({
          columns: [valIndices, valLosses]
        });

        // Add toggle button
        $("#chart-buttons").append("&nbsp;<button data-plot='Val' class='btn btn-primary active' data-toggle='button' aria-pressed='true'>Val</button>");
      }

      // Toggles plots on chart
      $("#chart-buttons").on("click", "button", function() {
        var $el = $(this);
        var plot = $el.data("plot");
        var isShown = $el.attr("aria-pressed") === "true";
        if (isShown) {
          chart.hide([plot]);
        } else {
          chart.show([plot]);
        }
        $el.button("toggle");
        return false; // Stop event and propagation
      });

      // Kills experiment
      $("button.kill").on("click", function() {
        $.ajax({
          url: "#{machine.address}/experiments/#{experiment._id}/kill",
          type: "POST"
        }).then(function(response) {
          location.reload(); // May have succeeded before kill
        }).catch(function(err) {console.log(err);});
        return false; // Stop event and propagation
      });
    });
