extends ./layout.jade

block title
  title FGLab: Project #{project.name}

block styles
  link(href="/bower_components/bootstrap-table/dist/bootstrap-table.min.css", rel="stylesheet")

block content 
  h1 Project: #{project.name} #[small.text-muted (#{project._id})]
  h2 New Experiment
  // TODO Form validation with Bootstrap styles
  form#new-experiment
    each val, key in project.schema
      if (val.type === "int")
        .form-group.row
          label.form-control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="number", value="#{val.default}", name="#{key}", id="#{key}", required)
      else if (val.type === "float")
        .form-group.row
          label.form-control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="number", value="#{val.default}", step="any", name="#{key}", id="#{key}", required)
      else if (val.type === "bool")
        // TODO Consider replacing with two radio buttons
        .form-group.row
          label.form-control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="text", value="#{val.default}", pattern="(true|false)", title="Enter true or false", name="#{key}", id="#{key}", required)
      else if (val.type === "string")
        .form-group.row
          label.form-control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="text", value="#{val.default}", name="#{key}", id="#{key}", required)
      else if (val.type === "enum")
        .form-group.row
          label.form-control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            select.form-control(name="#{key}", id="#{key}")
              each value in val.values
                if (value === val.default)
                  option(value="#{value}", selected="selected") #{value}
                else
                  option(value="#{value}") #{value}
    #machines.form-group.row
      label.col-sm-3 Submit to machine
      .col-sm-9
        - each machine in machines
          button.btn.btn-primary(data-id="#{machine._id}") #{machine.hostname}

  h2 Experiments
  table#experiments

block scripts
  script(src="/bower_components/jquery/dist/jquery.min.js")
  script(src="/bower_components/bootstrap/dist/js/bootstrap.min.js")
  script(src="/bower_components/bootstrap-table/dist/bootstrap-table.min.js")
  script(src="/bower_components/bootstrap-table/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.min.js")
  script.
    // Flattens JSON objects
    JSON.flatten = function(data) {
      var result = {};
      function recurse (cur, prop) {
        if (Object(cur) !== cur) {
          result[prop] = cur;
        } else if (Array.isArray(cur)) {
          for(var i = 0, l = cur.length; i < l; i++) {
            recurse(cur[i], prop ? prop + "." + i : "" + i);
          }
          if (l == 0) {
            result[prop] = [];
          }
        } else {
          var isEmpty = true;
          for (var p in cur) {
            isEmpty = false;
            recurse(cur[p], prop ? prop + "." + p : p);
          }
          if (isEmpty) {
            result[prop] = {};
          }
        }
      }
      recurse(data, "");
      return result;
    }

    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};
    var experiments = !{JSON.stringify(experiments)};

    // Create columns from hyperparams
    var columns = [
      {field: "_id", title: "", formatter: function(val) {return "<button data-id='" + val + "' class='btn btn-danger-outline btn-sm delete'><span class='octicon octicon-trashcan'></span></button>";}},
      {field: "_id", title: "ID", sortable: "true", formatter: function(val) {return "<a href='/experiments/" + val + "'>" + val + "</a>";}},
      {field: "_status", title: "Status", sortable: "true", formatter: function(val) {
        // Colour-code status
        var textClass;
        var iconClass;
        if (val === "success") {
          textClass = "text-success";
          iconClass = "octicon octicon-check text-success";
        } else if (val === "fail") {
          textClass = "text-danger";
          iconClass = "octicon octicon-circle-slash text-danger";
        } else if (val == "running") {
          textClass = "text-info";
          iconClass = "octicon octicon-clock text-info";
        }
        return "<span class='" + textClass + "'>" + val + "</span> <span class='" + iconClass + "'></span>";
      }},
      {field: "_val.score", title: "Val Score", sortable: "true"},
      {field: "_test.score", title: "Test Score", sortable: "true"}
    ];
    // Utilises 2 functions to solve loop scope problem
    for (var key in schema) {
      columns.push({field: "_hyperparams." + key, title: key, sortable: true, formatter: function(k) {return function(val) {
        var textClass = "";
        // Mute default options
        if (val === schema[k].default) {
          textClass = "text-muted";
        }
        return "<span class='" + textClass + "'>" + val + "</span>";
      }}(key)});
    }
    columns.push({field: "_started", title: "Started", sortable: "true"});
    columns.push({field: "_finished", title: "Finished", sortable: "true"});

    // Flatten each experiment
    for (var i = 0; i < experiments.length; i++) {
      experiments[i] = JSON.flatten(experiments[i]);
    }

    $(function() {
      // Initialise experiment table
      $("#experiments").bootstrapTable({
        classes: "table",
        undefinedText: "",
        striped: true,
        sortName: "test.score",
        sortOrder: "desc",
        iconsPrefix: "octicon",
        search: true,
        columns: columns,
        data: experiments,
        showMultiSort: true,
        icons: {
          sort: "octicon-list-ordered",
          plus: "octicon-plus",
          minus: "octicon-dash"
        }
      });
      
      // Submits experiment
      $("#machines").on("click", "button", function() {
        // Get machine
        var macId = $(this).data("id");
        // Process form
        var formObj = {};
        // Loop over form simply (does not work on nested data)
        $("#new-experiment").find(":input").not(":submit").each(function(ind, el) {
          var $el = $(el);
          var name = $el.attr("name");
          var val = $el.val();
          // Convert ints/floats
          if ($el.attr("type") === "number") {
            val = Number(val);
          }
          // Convert bools
          if ($el.attr("pattern")) {
            val = (val === "true");
          }
          formObj[name] = val; // Set key and value
        });

        // TODO Sort race condition for capacity
        $.ajax({
          url: "/api/experiments/machines/" + macId + "/#{project._id}",
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify(formObj)
        })
        .then(function(resp) {
          location.assign("/experiments/" + resp._id); // Move to new experiment page
        })
        .catch(function(err) {
          alert(err.responseText);
        });
        return false; // Stop event and propagation
      });

      // Delete experiment
      $("button.delete").on("click", function() {
        $.ajax({
          url: "/api/experiments/" + $(this).data("id"),
          type: "DELETE"
        })
        .then(function() {
          location.reload(); // Refresh page
        });
        return false; // Stop event and propagation
      });
    });
