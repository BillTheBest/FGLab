extends ./layout.jade

block title
  title FGLab: Project #{project.name} Optimisation

block content 
  h1 #[span.mega-octicon.octicon-circuit-board] Project: #{project.name} Optimisation #[small.text-muted (#{project._id})]
  h2 Grid Search
  form#new-optimisation
    each val, key in project.schema
      if (val.type === "int" || val.type === "float")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10(style="margin-bottom: 5px")
            input.form-control(type="text", value="#{val.default}", name="#{key}", id="#{key}", readonly)
          label.form-control-label.control-label.col-sm-2.text-muted [min, max) # scale base
          .col-sm-2
            input.form-control.form-control-success(type="number", value="#{val.default}", step="any", data-key="#{key}", data-opt="min", required)
          .col-sm-2
            input.form-control.form-control-success(type="number", value="#{val.default}", step="any", data-key="#{key}", data-opt="max", required)
          .col-sm-2
            input.form-control.form-control-success(type="number", value="1", data-key="#{key}", data-opt="num", required)
          .col-sm-2
            select.form-control.c-select.form-control-success(data-key="#{key}", data-opt="scale")
              option(value="linear", selected) Linear
              option(value="log") Log
          .col-sm-2
            input.form-control.form-control-success(type="number", value="10", step="any", data-key="#{key}", data-opt="pow", required)
      else if (val.type === "bool")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10
            input.form-control.form-control-success(type="text", value="true,false", name="#{key}", id="#{key}", readonly)
      else if (val.type === "string")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10
            input.form-control.form-control-success(type="text", value="#{val.default}", name="#{key}", id="#{key}", data-type="string", required)
      else if (val.type === "enum")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10
            input.form-control.form-control-success(type="text", value="#{val.values}", name="#{key}", id="#{key}", readonly)
    .form-group.row
      .col-sm-10.col-sm-offset-2
        button.btn.btn-primary(type="submit") Submit

block scripts
  script(src="/bower_components/jquery/dist/jquery.min.js")
  script(src="/bower_components/bootstrap/dist/js/bootstrap.min.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};

    $(function() {
      $("[data-opt]").on("change", function() {
        // Elements
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");
        var $min = $formGroup.find("[data-opt='min']");
        var $max = $formGroup.find("[data-opt='max']");
        var $num = $formGroup.find("[data-opt='num']");
        var $scale = $formGroup.find("[data-opt='scale']");
        var $pow = $formGroup.find("[data-opt='pow']");
        var $val = $formGroup.find("#" + $min.data("key"));

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");

        // Values
        var min = parseFloat($min.val());
        var max = parseFloat($max.val());
        var num = parseFloat($num.val());
        var scale = $scale.val();
        var pow = parseFloat($pow.val());
        var type = $formGroup.data("type");

        // Check validity
        if (num <= 0 || pow <= 0 || min > max || num % 1 !== 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        // Loop through values
        var values = Array(num);
        var step = (max - min)/num;
        for (var s = 0; s < num; s++) {
          values[s] = min + s*step;
          if (scale === "log") {
            values[s] = Math.pow(pow, values[s]);
          } else if (type === "int") {
            values[s] = Math.round(values[s]);
          }
        }
        $val.val(values);

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      $("[data-type='string']").on("change", function() {
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");

        if ($el.val().length === 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      // Submits experiment
      $("#new-optimisation").on("submit", function() {
        // Process form
        var formObj = {};
        // Loop over form simply (does not work on nested data)
        $(this).find("[id]:input").not(":submit").each(function(ind, el) {
          var $el = $(el);
          var $formGroup = $el.closest(".form-group");
          var name = $el.attr("name");
          var val = $el.val();
          var type = $formGroup.data("type");

          // Get all elements
          var vals = [];
          val.split(",").forEach(function(a) {
            if (type === "int" || type === "float") {
              a = parseFloat(a);
            } else if (type === "bool") {
              a = (a === "true");
            }
            vals.push(a);
          });
          formObj[name] = vals; // Set key and value
        });

        $.ajax({
          url: "/api/projects/optimisation?project=#{project._id}",
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify(formObj)
        })
        .then(function(resp) {
          location.assign("/experiments"); // Move to experiments page
        })
        .catch(function(err) {
          alert(err.responseText);
        });
        return false; // Stop event and propagation
      });
    });
