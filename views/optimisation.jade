extends ./layout.jade

block title
  title FGLab: Project #{project.name} Optimisation

block content 
  h1 Project: #{project.name} Optimisation #[small.text-muted (#{project._id})]
  h2 Grid Search
  form#new-optimisation
    each val, key in project.schema
      if (val.type === "int")
        .form-group.row
          label.form-control-label.control-label.col-sm-3(for="#{key}") #{key} (min) (max) (step) (scale)
          .col-sm-2
            input.form-control(type="number", value="#{val.default}", id="#{key}_min", required)
          .col-sm-2
            input.form-control(type="number", value="#{val.default}", id="#{key}_max", required)
          .col-sm-2
            input.form-control(type="number", value="1", step="any", id="#{key}_step", required)
          .col-sm-3
            select.form-control(id="#{key}_scale")
              option(value="linear", selected) Linear
              option(value="log") Log
          br
          br
          .col-sm-9.col-sm-offset-3
            input.form-control(type="number", value="#{val.default}", name="#{key}", id="#{key}", disabled)
      else if (val.type === "float")
        .form-group.row
          label.form-control-label.control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-2
            input.form-control(type="number", value="#{val.default}", step="any", id="#{key}_min", required)
          .col-sm-2
            input.form-control(type="number", value="#{val.default}", step="any", id="#{key}_max", required)
          .col-sm-2
            input.form-control(type="number", value="1", step="any", id="#{key}_step", required)
          .col-sm-3
            select.form-control(id="#{key}_scale")
              option(value="linear", selected) Linear
              option(value="log") Log
          br
          br
          .col-sm-9.col-sm-offset-3
            input.form-control(type="number", value="#{val.default}", step="any", name="#{key}", id="#{key}", disabled)
      else if (val.type === "bool")
        .form-group.row
          label.form-control-label.control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="text", value="true,false", name="#{key}", id="#{key}", disabled)
      else if (val.type === "string")
        .form-group.row
          label.form-control-label.control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="text", value="#{val.default}", name="#{key}", id="#{key}", required)
      else if (val.type === "enum")
        .form-group.row
          label.form-control-label.control-label.col-sm-3(for="#{key}") #{key}
          .col-sm-9
            input.form-control(type="text", value="#{val.values}", name="#{key}", id="#{key}", disabled)
    .form-group.row
      .col-sm-9.col-sm-offset-3
        button.btn.btn-primary(type="submit") Submit

block scripts
  script(src="/bower_components/jquery/dist/jquery.min.js")
  script(src="/bower_components/bootstrap/dist/js/bootstrap.min.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};

    $(function() {
      // Submits experiment
      $("#new-experiment").on("submit", function() {
        // Process form
        var formObj = {};
        // Loop over form simply (does not work on nested data)
        var hasErrors = false;
        $(this).find(":input").not(":submit").each(function(ind, el) {
          var $el = $(el);
          var $formGroup = $el.closest(".form-group");
          // Remove previous validation
          $el.removeClass("form-control-success form-control-error");
          $formGroup.removeClass("has-success has-error");
          var name = $el.attr("name");
          var val = $el.val();
          // Validate
          if ($el.attr("type") === "number") {
            val = parseFloat(val);
            // Check floats
            if (isNaN(val)) {
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              if ($el.attr("step")) {
                $el.addClass("form-control-success");
                $formGroup.addClass("has-success");
              } else {
                // Check ints
                if (val % 1 !== 0) {
                  $el.addClass("form-control-error");
                  $formGroup.addClass("has-error");
                  hasErrors = true;
                } else {
                  $el.addClass("form-control-success");
                  $formGroup.addClass("has-success");
                }
              }
            }
          } else if ($el.attr("pattern")) {
            if (val !== "true" && val !== "false") {
              // Check bools
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              // Convert bools
              val = (val === "true");
              $el.addClass("form-control-success");
              $formGroup.addClass("has-success");
            }
          } else {
            if (val === "") {
              // Check strings
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              $el.addClass("form-control-success");
              $formGroup.addClass("has-success");
            }
          }
          formObj[name] = val; // Set key and value
        });
        // Stop if form has errors
        if (hasErrors) {
          return false;
        }

        $.ajax({
          url: "/api/experiments/submit?project=#{project._id}",
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify(formObj)
        })
        .then(function(resp) {
          location.assign("/experiments/" + resp._id); // Move to new experiment page
        })
        .catch(function(err) {
          alert(err.responseText);
        });
        return false; // Stop event and propagation
      });
    });
